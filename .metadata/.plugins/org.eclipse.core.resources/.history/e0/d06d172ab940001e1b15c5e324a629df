package com.offer.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.offer.exception.ParentRelationModificationException;
import com.offer.model.Offer;
import com.offer.model.SubOffer;
import com.offer.service.IOfferService;
import com.offer.service.ISubOfferService;

@RestController
@RequestMapping("/api/suboffers")
@CrossOrigin(origins = "http://localhost:4200", allowedHeaders = {"Content-Type", "application/json"}, methods = {RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE})
public class SubOfferController {

	//Injecting subOfferService dependency.
    @Autowired
    private ISubOfferService subOfferService;
    
    
    //Injecting OfferService dependency.
    @Autowired
    private IOfferService offerService;

    
    //Create subOffer using post mapping.
    @PostMapping("/createSubOffer")
    public ResponseEntity<SubOffer> addSubOffer(@RequestBody SubOffer subOffer) {
        SubOffer addedSubOffer = this.subOfferService.addSubOffer(subOffer);
        return new ResponseEntity<>(addedSubOffer, HttpStatus.CREATED);
    }

    
    //Update suboffer using subofferId.
    @PutMapping("/updateSubOffer/{subOfferId}")
    public ResponseEntity<?> updateSubOffer(@PathVariable Long subOfferId, @RequestBody SubOffer subOffer) {
        subOffer.setSubOfferId(subOfferId); // Set the ID from the path variable
        try {
            SubOffer updatedSubOffer = this.subOfferService.updateSubOffer(subOffer);
            return new ResponseEntity<>(updatedSubOffer, HttpStatus.OK);
        } catch (ParentRelationModificationException e) {
            return new ResponseEntity<>(e.getMessage(),HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(),HttpStatus.NOT_FOUND);
        }
    }

    
    //Get suboffer using subofferId.
    @GetMapping("/getSubOfferById/{subOfferId}")
    public ResponseEntity<SubOffer> getSubOfferById(@PathVariable Long subOfferId) {
        try {
            SubOffer subOffer = this.subOfferService.getSubOfferById(subOfferId);
            return new ResponseEntity<>(subOffer, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    //Get All Suboffers present in database.
    @GetMapping("/getAllSubOffers")
    public ResponseEntity<List<SubOffer>> getAllSubOffers() {
        List<SubOffer> subOffers = subOfferService.getAllSubOffers();
        return new ResponseEntity<>(subOffers, HttpStatus.OK);
    }

    @DeleteMapping("/deleteSubOffer/{subOfferId}")
    public ResponseEntity<String> deleteSubOffer(@PathVariable Long subOfferId) {
        String response = subOfferService.deleteSubOffer(subOfferId);
        return new ResponseEntity<>(response, HttpStatus.OK);
    }
    
    
    @GetMapping("/getOptional/{offer_id}")
    public ResponseEntity<?> getOptionalSubOffers(@PathVariable Long offer_id) {
        try {
            // Call the service to retrieve optional sub-offers by offer ID
            List<SubOffer> optionalSubOffers = subOfferService.getOptionalSubOffersByOfferId(offer_id);
            
            if (optionalSubOffers.isEmpty()) {
                return ResponseEntity.noContent().build();
            }
            
            return ResponseEntity.ok(optionalSubOffers);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    
    @PostMapping("/addSubOfferToOffer/{offerId}")
    public ResponseEntity<?> addSubOfferToOffer(@PathVariable Long offerId, @RequestBody SubOffer subOffer) {
        try {
        	System.out.println(subOffer);
        	
        	Offer existingOffer = this.offerService.getOfferWithSubOffersById(offerId);
        	
        	// Set the offer for the new suboffer
            subOffer.setOffer(existingOffer);
            
         // Save the new suboffer
            SubOffer addedSubOffer = this.subOfferService.addSubOffer(subOffer);
            
         // Update the list of suboffers in the existing offer
            existingOffer.addSubOffer(addedSubOffer);
            
         // Update the existing offer in the database
            offerService.updateOffer(existingOffer);
            
            return new ResponseEntity<>(addedSubOffer, HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(),HttpStatus.BAD_REQUEST);
        }
    }

    @ExceptionHandler(ParentRelationModificationException.class)
    public ResponseEntity<String> handleParentRelationModificationException(ParentRelationModificationException ex) {
        return new ResponseEntity<>(ex.getMessage(), HttpStatus.BAD_REQUEST);
    }
}
